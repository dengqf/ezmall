/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ezmall.server.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TGoodsDto implements org.apache.thrift.TBase<TGoodsDto, TGoodsDto._Fields>, java.io.Serializable, Cloneable, Comparable<TGoodsDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGoodsDto");

  private static final org.apache.thrift.protocol.TField GOODS_FIELD_DESC = new org.apache.thrift.protocol.TField("goods", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BRAND_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("brandName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BRAND_ENGLISH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("brandEnglishName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STRUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("structName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROP_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("propMap", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGoodsDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGoodsDtoTupleSchemeFactory());
  }

  public TGoods goods; // required
  public String brandName; // required
  public String brandEnglishName; // required
  public String structName; // required
  public Map<String,String> propMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GOODS((short)1, "goods"),
    BRAND_NAME((short)2, "brandName"),
    BRAND_ENGLISH_NAME((short)3, "brandEnglishName"),
    STRUCT_NAME((short)4, "structName"),
    PROP_MAP((short)5, "propMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GOODS
          return GOODS;
        case 2: // BRAND_NAME
          return BRAND_NAME;
        case 3: // BRAND_ENGLISH_NAME
          return BRAND_ENGLISH_NAME;
        case 4: // STRUCT_NAME
          return STRUCT_NAME;
        case 5: // PROP_MAP
          return PROP_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GOODS, new org.apache.thrift.meta_data.FieldMetaData("goods", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGoods.class)));
    tmpMap.put(_Fields.BRAND_NAME, new org.apache.thrift.meta_data.FieldMetaData("brandName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRAND_ENGLISH_NAME, new org.apache.thrift.meta_data.FieldMetaData("brandEnglishName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("structName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROP_MAP, new org.apache.thrift.meta_data.FieldMetaData("propMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGoodsDto.class, metaDataMap);
  }

  public TGoodsDto() {
  }

  public TGoodsDto(
    TGoods goods,
    String brandName,
    String brandEnglishName,
    String structName,
    Map<String,String> propMap)
  {
    this();
    this.goods = goods;
    this.brandName = brandName;
    this.brandEnglishName = brandEnglishName;
    this.structName = structName;
    this.propMap = propMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGoodsDto(TGoodsDto other) {
    if (other.isSetGoods()) {
      this.goods = new TGoods(other.goods);
    }
    if (other.isSetBrandName()) {
      this.brandName = other.brandName;
    }
    if (other.isSetBrandEnglishName()) {
      this.brandEnglishName = other.brandEnglishName;
    }
    if (other.isSetStructName()) {
      this.structName = other.structName;
    }
    if (other.isSetPropMap()) {
      Map<String,String> __this__propMap = new HashMap<String,String>(other.propMap);
      this.propMap = __this__propMap;
    }
  }

  public TGoodsDto deepCopy() {
    return new TGoodsDto(this);
  }

  @Override
  public void clear() {
    this.goods = null;
    this.brandName = null;
    this.brandEnglishName = null;
    this.structName = null;
    this.propMap = null;
  }

  public TGoods getGoods() {
    return this.goods;
  }

  public TGoodsDto setGoods(TGoods goods) {
    this.goods = goods;
    return this;
  }

  public void unsetGoods() {
    this.goods = null;
  }

  /** Returns true if field goods is set (has been assigned a value) and false otherwise */
  public boolean isSetGoods() {
    return this.goods != null;
  }

  public void setGoodsIsSet(boolean value) {
    if (!value) {
      this.goods = null;
    }
  }

  public String getBrandName() {
    return this.brandName;
  }

  public TGoodsDto setBrandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

  public void unsetBrandName() {
    this.brandName = null;
  }

  /** Returns true if field brandName is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandName() {
    return this.brandName != null;
  }

  public void setBrandNameIsSet(boolean value) {
    if (!value) {
      this.brandName = null;
    }
  }

  public String getBrandEnglishName() {
    return this.brandEnglishName;
  }

  public TGoodsDto setBrandEnglishName(String brandEnglishName) {
    this.brandEnglishName = brandEnglishName;
    return this;
  }

  public void unsetBrandEnglishName() {
    this.brandEnglishName = null;
  }

  /** Returns true if field brandEnglishName is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandEnglishName() {
    return this.brandEnglishName != null;
  }

  public void setBrandEnglishNameIsSet(boolean value) {
    if (!value) {
      this.brandEnglishName = null;
    }
  }

  public String getStructName() {
    return this.structName;
  }

  public TGoodsDto setStructName(String structName) {
    this.structName = structName;
    return this;
  }

  public void unsetStructName() {
    this.structName = null;
  }

  /** Returns true if field structName is set (has been assigned a value) and false otherwise */
  public boolean isSetStructName() {
    return this.structName != null;
  }

  public void setStructNameIsSet(boolean value) {
    if (!value) {
      this.structName = null;
    }
  }

  public int getPropMapSize() {
    return (this.propMap == null) ? 0 : this.propMap.size();
  }

  public void putToPropMap(String key, String val) {
    if (this.propMap == null) {
      this.propMap = new HashMap<String,String>();
    }
    this.propMap.put(key, val);
  }

  public Map<String,String> getPropMap() {
    return this.propMap;
  }

  public TGoodsDto setPropMap(Map<String,String> propMap) {
    this.propMap = propMap;
    return this;
  }

  public void unsetPropMap() {
    this.propMap = null;
  }

  /** Returns true if field propMap is set (has been assigned a value) and false otherwise */
  public boolean isSetPropMap() {
    return this.propMap != null;
  }

  public void setPropMapIsSet(boolean value) {
    if (!value) {
      this.propMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GOODS:
      if (value == null) {
        unsetGoods();
      } else {
        setGoods((TGoods)value);
      }
      break;

    case BRAND_NAME:
      if (value == null) {
        unsetBrandName();
      } else {
        setBrandName((String)value);
      }
      break;

    case BRAND_ENGLISH_NAME:
      if (value == null) {
        unsetBrandEnglishName();
      } else {
        setBrandEnglishName((String)value);
      }
      break;

    case STRUCT_NAME:
      if (value == null) {
        unsetStructName();
      } else {
        setStructName((String)value);
      }
      break;

    case PROP_MAP:
      if (value == null) {
        unsetPropMap();
      } else {
        setPropMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GOODS:
      return getGoods();

    case BRAND_NAME:
      return getBrandName();

    case BRAND_ENGLISH_NAME:
      return getBrandEnglishName();

    case STRUCT_NAME:
      return getStructName();

    case PROP_MAP:
      return getPropMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GOODS:
      return isSetGoods();
    case BRAND_NAME:
      return isSetBrandName();
    case BRAND_ENGLISH_NAME:
      return isSetBrandEnglishName();
    case STRUCT_NAME:
      return isSetStructName();
    case PROP_MAP:
      return isSetPropMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGoodsDto)
      return this.equals((TGoodsDto)that);
    return false;
  }

  public boolean equals(TGoodsDto that) {
    if (that == null)
      return false;

    boolean this_present_goods = true && this.isSetGoods();
    boolean that_present_goods = true && that.isSetGoods();
    if (this_present_goods || that_present_goods) {
      if (!(this_present_goods && that_present_goods))
        return false;
      if (!this.goods.equals(that.goods))
        return false;
    }

    boolean this_present_brandName = true && this.isSetBrandName();
    boolean that_present_brandName = true && that.isSetBrandName();
    if (this_present_brandName || that_present_brandName) {
      if (!(this_present_brandName && that_present_brandName))
        return false;
      if (!this.brandName.equals(that.brandName))
        return false;
    }

    boolean this_present_brandEnglishName = true && this.isSetBrandEnglishName();
    boolean that_present_brandEnglishName = true && that.isSetBrandEnglishName();
    if (this_present_brandEnglishName || that_present_brandEnglishName) {
      if (!(this_present_brandEnglishName && that_present_brandEnglishName))
        return false;
      if (!this.brandEnglishName.equals(that.brandEnglishName))
        return false;
    }

    boolean this_present_structName = true && this.isSetStructName();
    boolean that_present_structName = true && that.isSetStructName();
    if (this_present_structName || that_present_structName) {
      if (!(this_present_structName && that_present_structName))
        return false;
      if (!this.structName.equals(that.structName))
        return false;
    }

    boolean this_present_propMap = true && this.isSetPropMap();
    boolean that_present_propMap = true && that.isSetPropMap();
    if (this_present_propMap || that_present_propMap) {
      if (!(this_present_propMap && that_present_propMap))
        return false;
      if (!this.propMap.equals(that.propMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TGoodsDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGoods()).compareTo(other.isSetGoods());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoods()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goods, other.goods);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandName()).compareTo(other.isSetBrandName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandName, other.brandName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandEnglishName()).compareTo(other.isSetBrandEnglishName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandEnglishName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandEnglishName, other.brandEnglishName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStructName()).compareTo(other.isSetStructName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structName, other.structName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPropMap()).compareTo(other.isSetPropMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propMap, other.propMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGoodsDto(");
    boolean first = true;

    sb.append("goods:");
    if (this.goods == null) {
      sb.append("null");
    } else {
      sb.append(this.goods);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandName:");
    if (this.brandName == null) {
      sb.append("null");
    } else {
      sb.append(this.brandName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandEnglishName:");
    if (this.brandEnglishName == null) {
      sb.append("null");
    } else {
      sb.append(this.brandEnglishName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("structName:");
    if (this.structName == null) {
      sb.append("null");
    } else {
      sb.append(this.structName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("propMap:");
    if (this.propMap == null) {
      sb.append("null");
    } else {
      sb.append(this.propMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (goods != null) {
      goods.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGoodsDtoStandardSchemeFactory implements SchemeFactory {
    public TGoodsDtoStandardScheme getScheme() {
      return new TGoodsDtoStandardScheme();
    }
  }

  private static class TGoodsDtoStandardScheme extends StandardScheme<TGoodsDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGoodsDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GOODS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.goods = new TGoods();
              struct.goods.read(iprot);
              struct.setGoodsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BRAND_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brandName = iprot.readString();
              struct.setBrandNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BRAND_ENGLISH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brandEnglishName = iprot.readString();
              struct.setBrandEnglishNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STRUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.structName = iprot.readString();
              struct.setStructNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROP_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.propMap = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  String _val3;
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.propMap.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setPropMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGoodsDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.goods != null) {
        oprot.writeFieldBegin(GOODS_FIELD_DESC);
        struct.goods.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.brandName != null) {
        oprot.writeFieldBegin(BRAND_NAME_FIELD_DESC);
        oprot.writeString(struct.brandName);
        oprot.writeFieldEnd();
      }
      if (struct.brandEnglishName != null) {
        oprot.writeFieldBegin(BRAND_ENGLISH_NAME_FIELD_DESC);
        oprot.writeString(struct.brandEnglishName);
        oprot.writeFieldEnd();
      }
      if (struct.structName != null) {
        oprot.writeFieldBegin(STRUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.structName);
        oprot.writeFieldEnd();
      }
      if (struct.propMap != null) {
        oprot.writeFieldBegin(PROP_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.propMap.size()));
          for (Map.Entry<String, String> _iter4 : struct.propMap.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGoodsDtoTupleSchemeFactory implements SchemeFactory {
    public TGoodsDtoTupleScheme getScheme() {
      return new TGoodsDtoTupleScheme();
    }
  }

  private static class TGoodsDtoTupleScheme extends TupleScheme<TGoodsDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGoodsDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGoods()) {
        optionals.set(0);
      }
      if (struct.isSetBrandName()) {
        optionals.set(1);
      }
      if (struct.isSetBrandEnglishName()) {
        optionals.set(2);
      }
      if (struct.isSetStructName()) {
        optionals.set(3);
      }
      if (struct.isSetPropMap()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetGoods()) {
        struct.goods.write(oprot);
      }
      if (struct.isSetBrandName()) {
        oprot.writeString(struct.brandName);
      }
      if (struct.isSetBrandEnglishName()) {
        oprot.writeString(struct.brandEnglishName);
      }
      if (struct.isSetStructName()) {
        oprot.writeString(struct.structName);
      }
      if (struct.isSetPropMap()) {
        {
          oprot.writeI32(struct.propMap.size());
          for (Map.Entry<String, String> _iter5 : struct.propMap.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGoodsDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.goods = new TGoods();
        struct.goods.read(iprot);
        struct.setGoodsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.brandName = iprot.readString();
        struct.setBrandNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.brandEnglishName = iprot.readString();
        struct.setBrandEnglishNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.structName = iprot.readString();
        struct.setStructNameIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.propMap = new HashMap<String,String>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            String _key8;
            String _val9;
            _key8 = iprot.readString();
            _val9 = iprot.readString();
            struct.propMap.put(_key8, _val9);
          }
        }
        struct.setPropMapIsSet(true);
      }
    }
  }

}

