#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'goodsservice_api_types'

module Goodsservice
  module GoodsServiceApi
    class Client
      include ::Thrift::Client

      def getStr(param1)
        send_getStr(param1)
        return recv_getStr()
      end

      def send_getStr(param1)
        send_message('getStr', GetStr_args, :param1 => param1)
      end

      def recv_getStr()
        result = receive_message(GetStr_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getStr failed: unknown result')
      end

      def insertGoods(goods)
        send_insertGoods(goods)
        return recv_insertGoods()
      end

      def send_insertGoods(goods)
        send_message('insertGoods', InsertGoods_args, :goods => goods)
      end

      def recv_insertGoods()
        result = receive_message(InsertGoods_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'insertGoods failed: unknown result')
      end

      def isGoodExists(goodNo, thridDomain)
        send_isGoodExists(goodNo, thridDomain)
        return recv_isGoodExists()
      end

      def send_isGoodExists(goodNo, thridDomain)
        send_message('isGoodExists', IsGoodExists_args, :goodNo => goodNo, :thridDomain => thridDomain)
      end

      def recv_isGoodExists()
        result = receive_message(IsGoodExists_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isGoodExists failed: unknown result')
      end

      def checkThirdId(thirdId, thridDomain)
        send_checkThirdId(thirdId, thridDomain)
        return recv_checkThirdId()
      end

      def send_checkThirdId(thirdId, thridDomain)
        send_message('checkThirdId', CheckThirdId_args, :thirdId => thirdId, :thridDomain => thridDomain)
      end

      def recv_checkThirdId()
        result = receive_message(CheckThirdId_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'checkThirdId failed: unknown result')
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_getStr(seqid, iprot, oprot)
        args = read_args(iprot, GetStr_args)
        result = GetStr_result.new()
        result.success = @handler.getStr(args.param1)
        write_result(result, oprot, 'getStr', seqid)
      end

      def process_insertGoods(seqid, iprot, oprot)
        args = read_args(iprot, InsertGoods_args)
        result = InsertGoods_result.new()
        result.success = @handler.insertGoods(args.goods)
        write_result(result, oprot, 'insertGoods', seqid)
      end

      def process_isGoodExists(seqid, iprot, oprot)
        args = read_args(iprot, IsGoodExists_args)
        result = IsGoodExists_result.new()
        result.success = @handler.isGoodExists(args.goodNo, args.thridDomain)
        write_result(result, oprot, 'isGoodExists', seqid)
      end

      def process_checkThirdId(seqid, iprot, oprot)
        args = read_args(iprot, CheckThirdId_args)
        result = CheckThirdId_result.new()
        result.success = @handler.checkThirdId(args.thirdId, args.thridDomain)
        write_result(result, oprot, 'checkThirdId', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class GetStr_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PARAM1 = 1

      FIELDS = {
        PARAM1 => {:type => ::Thrift::Types::STRING, :name => 'param1'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetStr_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class InsertGoods_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GOODS = 1

      FIELDS = {
        GOODS => {:type => ::Thrift::Types::STRUCT, :name => 'goods', :class => ::Goodsservice::TGoodsDto}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class InsertGoods_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class IsGoodExists_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GOODNO = 1
      THRIDDOMAIN = 2

      FIELDS = {
        GOODNO => {:type => ::Thrift::Types::STRING, :name => 'goodNo'},
        THRIDDOMAIN => {:type => ::Thrift::Types::STRING, :name => 'thridDomain'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class IsGoodExists_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CheckThirdId_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      THIRDID = 1
      THRIDDOMAIN = 2

      FIELDS = {
        THIRDID => {:type => ::Thrift::Types::STRING, :name => 'thirdId'},
        THRIDDOMAIN => {:type => ::Thrift::Types::STRING, :name => 'thridDomain'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CheckThirdId_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
