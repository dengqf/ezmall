/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ezmall.server.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GoodsServiceApi {

  public interface Iface {

    public String getStr(String param1) throws org.apache.thrift.TException;

    public String insertGoods(TGoodsDto goods) throws org.apache.thrift.TException;

    public boolean isGoodExists(String goodNo, String thridDomain) throws org.apache.thrift.TException;

    public boolean checkThirdId(String thirdId, String thridDomain) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getStr(String param1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insertGoods(TGoodsDto goods, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isGoodExists(String goodNo, String thridDomain, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkThirdId(String thirdId, String thridDomain, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getStr(String param1) throws org.apache.thrift.TException
    {
      send_getStr(param1);
      return recv_getStr();
    }

    public void send_getStr(String param1) throws org.apache.thrift.TException
    {
      getStr_args args = new getStr_args();
      args.setParam1(param1);
      sendBase("getStr", args);
    }

    public String recv_getStr() throws org.apache.thrift.TException
    {
      getStr_result result = new getStr_result();
      receiveBase(result, "getStr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStr failed: unknown result");
    }

    public String insertGoods(TGoodsDto goods) throws org.apache.thrift.TException
    {
      send_insertGoods(goods);
      return recv_insertGoods();
    }

    public void send_insertGoods(TGoodsDto goods) throws org.apache.thrift.TException
    {
      insertGoods_args args = new insertGoods_args();
      args.setGoods(goods);
      sendBase("insertGoods", args);
    }

    public String recv_insertGoods() throws org.apache.thrift.TException
    {
      insertGoods_result result = new insertGoods_result();
      receiveBase(result, "insertGoods");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertGoods failed: unknown result");
    }

    public boolean isGoodExists(String goodNo, String thridDomain) throws org.apache.thrift.TException
    {
      send_isGoodExists(goodNo, thridDomain);
      return recv_isGoodExists();
    }

    public void send_isGoodExists(String goodNo, String thridDomain) throws org.apache.thrift.TException
    {
      isGoodExists_args args = new isGoodExists_args();
      args.setGoodNo(goodNo);
      args.setThridDomain(thridDomain);
      sendBase("isGoodExists", args);
    }

    public boolean recv_isGoodExists() throws org.apache.thrift.TException
    {
      isGoodExists_result result = new isGoodExists_result();
      receiveBase(result, "isGoodExists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isGoodExists failed: unknown result");
    }

    public boolean checkThirdId(String thirdId, String thridDomain) throws org.apache.thrift.TException
    {
      send_checkThirdId(thirdId, thridDomain);
      return recv_checkThirdId();
    }

    public void send_checkThirdId(String thirdId, String thridDomain) throws org.apache.thrift.TException
    {
      checkThirdId_args args = new checkThirdId_args();
      args.setThirdId(thirdId);
      args.setThridDomain(thridDomain);
      sendBase("checkThirdId", args);
    }

    public boolean recv_checkThirdId() throws org.apache.thrift.TException
    {
      checkThirdId_result result = new checkThirdId_result();
      receiveBase(result, "checkThirdId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkThirdId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getStr(String param1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStr_call method_call = new getStr_call(param1, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String param1;
      public getStr_call(String param1, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param1 = param1;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStr_args args = new getStr_args();
        args.setParam1(param1);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStr();
      }
    }

    public void insertGoods(TGoodsDto goods, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertGoods_call method_call = new insertGoods_call(goods, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertGoods_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TGoodsDto goods;
      public insertGoods_call(TGoodsDto goods, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.goods = goods;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertGoods", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertGoods_args args = new insertGoods_args();
        args.setGoods(goods);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertGoods();
      }
    }

    public void isGoodExists(String goodNo, String thridDomain, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isGoodExists_call method_call = new isGoodExists_call(goodNo, thridDomain, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isGoodExists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String goodNo;
      private String thridDomain;
      public isGoodExists_call(String goodNo, String thridDomain, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.goodNo = goodNo;
        this.thridDomain = thridDomain;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isGoodExists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isGoodExists_args args = new isGoodExists_args();
        args.setGoodNo(goodNo);
        args.setThridDomain(thridDomain);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isGoodExists();
      }
    }

    public void checkThirdId(String thirdId, String thridDomain, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkThirdId_call method_call = new checkThirdId_call(thirdId, thridDomain, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkThirdId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String thirdId;
      private String thridDomain;
      public checkThirdId_call(String thirdId, String thridDomain, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.thirdId = thirdId;
        this.thridDomain = thridDomain;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkThirdId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkThirdId_args args = new checkThirdId_args();
        args.setThirdId(thirdId);
        args.setThridDomain(thridDomain);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkThirdId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getStr", new getStr());
      processMap.put("insertGoods", new insertGoods());
      processMap.put("isGoodExists", new isGoodExists());
      processMap.put("checkThirdId", new checkThirdId());
      return processMap;
    }

    public static class getStr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStr_args> {
      public getStr() {
        super("getStr");
      }

      public getStr_args getEmptyArgsInstance() {
        return new getStr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStr_result getResult(I iface, getStr_args args) throws org.apache.thrift.TException {
        getStr_result result = new getStr_result();
        result.success = iface.getStr(args.param1);
        return result;
      }
    }

    public static class insertGoods<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertGoods_args> {
      public insertGoods() {
        super("insertGoods");
      }

      public insertGoods_args getEmptyArgsInstance() {
        return new insertGoods_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertGoods_result getResult(I iface, insertGoods_args args) throws org.apache.thrift.TException {
        insertGoods_result result = new insertGoods_result();
        result.success = iface.insertGoods(args.goods);
        return result;
      }
    }

    public static class isGoodExists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isGoodExists_args> {
      public isGoodExists() {
        super("isGoodExists");
      }

      public isGoodExists_args getEmptyArgsInstance() {
        return new isGoodExists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isGoodExists_result getResult(I iface, isGoodExists_args args) throws org.apache.thrift.TException {
        isGoodExists_result result = new isGoodExists_result();
        result.success = iface.isGoodExists(args.goodNo, args.thridDomain);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class checkThirdId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkThirdId_args> {
      public checkThirdId() {
        super("checkThirdId");
      }

      public checkThirdId_args getEmptyArgsInstance() {
        return new checkThirdId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkThirdId_result getResult(I iface, checkThirdId_args args) throws org.apache.thrift.TException {
        checkThirdId_result result = new checkThirdId_result();
        result.success = iface.checkThirdId(args.thirdId, args.thridDomain);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getStr", new getStr());
      processMap.put("insertGoods", new insertGoods());
      processMap.put("isGoodExists", new isGoodExists());
      processMap.put("checkThirdId", new checkThirdId());
      return processMap;
    }

    public static class getStr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStr_args, String> {
      public getStr() {
        super("getStr");
      }

      public getStr_args getEmptyArgsInstance() {
        return new getStr_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getStr_result result = new getStr_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStr_result result = new getStr_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStr_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getStr(args.param1,resultHandler);
      }
    }

    public static class insertGoods<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertGoods_args, String> {
      public insertGoods() {
        super("insertGoods");
      }

      public insertGoods_args getEmptyArgsInstance() {
        return new insertGoods_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            insertGoods_result result = new insertGoods_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertGoods_result result = new insertGoods_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertGoods_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.insertGoods(args.goods,resultHandler);
      }
    }

    public static class isGoodExists<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isGoodExists_args, Boolean> {
      public isGoodExists() {
        super("isGoodExists");
      }

      public isGoodExists_args getEmptyArgsInstance() {
        return new isGoodExists_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isGoodExists_result result = new isGoodExists_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isGoodExists_result result = new isGoodExists_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isGoodExists_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isGoodExists(args.goodNo, args.thridDomain,resultHandler);
      }
    }

    public static class checkThirdId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkThirdId_args, Boolean> {
      public checkThirdId() {
        super("checkThirdId");
      }

      public checkThirdId_args getEmptyArgsInstance() {
        return new checkThirdId_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            checkThirdId_result result = new checkThirdId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkThirdId_result result = new checkThirdId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkThirdId_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.checkThirdId(args.thirdId, args.thridDomain,resultHandler);
      }
    }

  }

  public static class getStr_args implements org.apache.thrift.TBase<getStr_args, getStr_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStr_args");

    private static final org.apache.thrift.protocol.TField PARAM1_FIELD_DESC = new org.apache.thrift.protocol.TField("param1", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStr_argsTupleSchemeFactory());
    }

    public String param1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM1((short)1, "param1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM1
            return PARAM1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM1, new org.apache.thrift.meta_data.FieldMetaData("param1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStr_args.class, metaDataMap);
    }

    public getStr_args() {
    }

    public getStr_args(
      String param1)
    {
      this();
      this.param1 = param1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStr_args(getStr_args other) {
      if (other.isSetParam1()) {
        this.param1 = other.param1;
      }
    }

    public getStr_args deepCopy() {
      return new getStr_args(this);
    }

    @Override
    public void clear() {
      this.param1 = null;
    }

    public String getParam1() {
      return this.param1;
    }

    public getStr_args setParam1(String param1) {
      this.param1 = param1;
      return this;
    }

    public void unsetParam1() {
      this.param1 = null;
    }

    /** Returns true if field param1 is set (has been assigned a value) and false otherwise */
    public boolean isSetParam1() {
      return this.param1 != null;
    }

    public void setParam1IsSet(boolean value) {
      if (!value) {
        this.param1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM1:
        if (value == null) {
          unsetParam1();
        } else {
          setParam1((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM1:
        return getParam1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM1:
        return isSetParam1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStr_args)
        return this.equals((getStr_args)that);
      return false;
    }

    public boolean equals(getStr_args that) {
      if (that == null)
        return false;

      boolean this_present_param1 = true && this.isSetParam1();
      boolean that_present_param1 = true && that.isSetParam1();
      if (this_present_param1 || that_present_param1) {
        if (!(this_present_param1 && that_present_param1))
          return false;
        if (!this.param1.equals(that.param1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam1()).compareTo(other.isSetParam1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param1, other.param1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStr_args(");
      boolean first = true;

      sb.append("param1:");
      if (this.param1 == null) {
        sb.append("null");
      } else {
        sb.append(this.param1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStr_argsStandardSchemeFactory implements SchemeFactory {
      public getStr_argsStandardScheme getScheme() {
        return new getStr_argsStandardScheme();
      }
    }

    private static class getStr_argsStandardScheme extends StandardScheme<getStr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.param1 = iprot.readString();
                struct.setParam1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param1 != null) {
          oprot.writeFieldBegin(PARAM1_FIELD_DESC);
          oprot.writeString(struct.param1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStr_argsTupleSchemeFactory implements SchemeFactory {
      public getStr_argsTupleScheme getScheme() {
        return new getStr_argsTupleScheme();
      }
    }

    private static class getStr_argsTupleScheme extends TupleScheme<getStr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam1()) {
          oprot.writeString(struct.param1);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.param1 = iprot.readString();
          struct.setParam1IsSet(true);
        }
      }
    }

  }

  public static class getStr_result implements org.apache.thrift.TBase<getStr_result, getStr_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStr_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStr_result.class, metaDataMap);
    }

    public getStr_result() {
    }

    public getStr_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStr_result(getStr_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getStr_result deepCopy() {
      return new getStr_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStr_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStr_result)
        return this.equals((getStr_result)that);
      return false;
    }

    public boolean equals(getStr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStr_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStr_resultStandardSchemeFactory implements SchemeFactory {
      public getStr_resultStandardScheme getScheme() {
        return new getStr_resultStandardScheme();
      }
    }

    private static class getStr_resultStandardScheme extends StandardScheme<getStr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStr_resultTupleSchemeFactory implements SchemeFactory {
      public getStr_resultTupleScheme getScheme() {
        return new getStr_resultTupleScheme();
      }
    }

    private static class getStr_resultTupleScheme extends TupleScheme<getStr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class insertGoods_args implements org.apache.thrift.TBase<insertGoods_args, insertGoods_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertGoods_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertGoods_args");

    private static final org.apache.thrift.protocol.TField GOODS_FIELD_DESC = new org.apache.thrift.protocol.TField("goods", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertGoods_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertGoods_argsTupleSchemeFactory());
    }

    public TGoodsDto goods; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GOODS((short)1, "goods");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GOODS
            return GOODS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GOODS, new org.apache.thrift.meta_data.FieldMetaData("goods", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGoodsDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertGoods_args.class, metaDataMap);
    }

    public insertGoods_args() {
    }

    public insertGoods_args(
      TGoodsDto goods)
    {
      this();
      this.goods = goods;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertGoods_args(insertGoods_args other) {
      if (other.isSetGoods()) {
        this.goods = new TGoodsDto(other.goods);
      }
    }

    public insertGoods_args deepCopy() {
      return new insertGoods_args(this);
    }

    @Override
    public void clear() {
      this.goods = null;
    }

    public TGoodsDto getGoods() {
      return this.goods;
    }

    public insertGoods_args setGoods(TGoodsDto goods) {
      this.goods = goods;
      return this;
    }

    public void unsetGoods() {
      this.goods = null;
    }

    /** Returns true if field goods is set (has been assigned a value) and false otherwise */
    public boolean isSetGoods() {
      return this.goods != null;
    }

    public void setGoodsIsSet(boolean value) {
      if (!value) {
        this.goods = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GOODS:
        if (value == null) {
          unsetGoods();
        } else {
          setGoods((TGoodsDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GOODS:
        return getGoods();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GOODS:
        return isSetGoods();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertGoods_args)
        return this.equals((insertGoods_args)that);
      return false;
    }

    public boolean equals(insertGoods_args that) {
      if (that == null)
        return false;

      boolean this_present_goods = true && this.isSetGoods();
      boolean that_present_goods = true && that.isSetGoods();
      if (this_present_goods || that_present_goods) {
        if (!(this_present_goods && that_present_goods))
          return false;
        if (!this.goods.equals(that.goods))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertGoods_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGoods()).compareTo(other.isSetGoods());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGoods()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goods, other.goods);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertGoods_args(");
      boolean first = true;

      sb.append("goods:");
      if (this.goods == null) {
        sb.append("null");
      } else {
        sb.append(this.goods);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (goods != null) {
        goods.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertGoods_argsStandardSchemeFactory implements SchemeFactory {
      public insertGoods_argsStandardScheme getScheme() {
        return new insertGoods_argsStandardScheme();
      }
    }

    private static class insertGoods_argsStandardScheme extends StandardScheme<insertGoods_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertGoods_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GOODS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.goods = new TGoodsDto();
                struct.goods.read(iprot);
                struct.setGoodsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertGoods_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.goods != null) {
          oprot.writeFieldBegin(GOODS_FIELD_DESC);
          struct.goods.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertGoods_argsTupleSchemeFactory implements SchemeFactory {
      public insertGoods_argsTupleScheme getScheme() {
        return new insertGoods_argsTupleScheme();
      }
    }

    private static class insertGoods_argsTupleScheme extends TupleScheme<insertGoods_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGoods()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGoods()) {
          struct.goods.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.goods = new TGoodsDto();
          struct.goods.read(iprot);
          struct.setGoodsIsSet(true);
        }
      }
    }

  }

  public static class insertGoods_result implements org.apache.thrift.TBase<insertGoods_result, insertGoods_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertGoods_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertGoods_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertGoods_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertGoods_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertGoods_result.class, metaDataMap);
    }

    public insertGoods_result() {
    }

    public insertGoods_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertGoods_result(insertGoods_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public insertGoods_result deepCopy() {
      return new insertGoods_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public insertGoods_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertGoods_result)
        return this.equals((insertGoods_result)that);
      return false;
    }

    public boolean equals(insertGoods_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertGoods_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertGoods_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertGoods_resultStandardSchemeFactory implements SchemeFactory {
      public insertGoods_resultStandardScheme getScheme() {
        return new insertGoods_resultStandardScheme();
      }
    }

    private static class insertGoods_resultStandardScheme extends StandardScheme<insertGoods_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertGoods_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertGoods_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertGoods_resultTupleSchemeFactory implements SchemeFactory {
      public insertGoods_resultTupleScheme getScheme() {
        return new insertGoods_resultTupleScheme();
      }
    }

    private static class insertGoods_resultTupleScheme extends TupleScheme<insertGoods_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isGoodExists_args implements org.apache.thrift.TBase<isGoodExists_args, isGoodExists_args._Fields>, java.io.Serializable, Cloneable, Comparable<isGoodExists_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isGoodExists_args");

    private static final org.apache.thrift.protocol.TField GOOD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("goodNo", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField THRID_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("thridDomain", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isGoodExists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isGoodExists_argsTupleSchemeFactory());
    }

    public String goodNo; // required
    public String thridDomain; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GOOD_NO((short)1, "goodNo"),
      THRID_DOMAIN((short)2, "thridDomain");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GOOD_NO
            return GOOD_NO;
          case 2: // THRID_DOMAIN
            return THRID_DOMAIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GOOD_NO, new org.apache.thrift.meta_data.FieldMetaData("goodNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.THRID_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("thridDomain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isGoodExists_args.class, metaDataMap);
    }

    public isGoodExists_args() {
    }

    public isGoodExists_args(
      String goodNo,
      String thridDomain)
    {
      this();
      this.goodNo = goodNo;
      this.thridDomain = thridDomain;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isGoodExists_args(isGoodExists_args other) {
      if (other.isSetGoodNo()) {
        this.goodNo = other.goodNo;
      }
      if (other.isSetThridDomain()) {
        this.thridDomain = other.thridDomain;
      }
    }

    public isGoodExists_args deepCopy() {
      return new isGoodExists_args(this);
    }

    @Override
    public void clear() {
      this.goodNo = null;
      this.thridDomain = null;
    }

    public String getGoodNo() {
      return this.goodNo;
    }

    public isGoodExists_args setGoodNo(String goodNo) {
      this.goodNo = goodNo;
      return this;
    }

    public void unsetGoodNo() {
      this.goodNo = null;
    }

    /** Returns true if field goodNo is set (has been assigned a value) and false otherwise */
    public boolean isSetGoodNo() {
      return this.goodNo != null;
    }

    public void setGoodNoIsSet(boolean value) {
      if (!value) {
        this.goodNo = null;
      }
    }

    public String getThridDomain() {
      return this.thridDomain;
    }

    public isGoodExists_args setThridDomain(String thridDomain) {
      this.thridDomain = thridDomain;
      return this;
    }

    public void unsetThridDomain() {
      this.thridDomain = null;
    }

    /** Returns true if field thridDomain is set (has been assigned a value) and false otherwise */
    public boolean isSetThridDomain() {
      return this.thridDomain != null;
    }

    public void setThridDomainIsSet(boolean value) {
      if (!value) {
        this.thridDomain = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GOOD_NO:
        if (value == null) {
          unsetGoodNo();
        } else {
          setGoodNo((String)value);
        }
        break;

      case THRID_DOMAIN:
        if (value == null) {
          unsetThridDomain();
        } else {
          setThridDomain((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GOOD_NO:
        return getGoodNo();

      case THRID_DOMAIN:
        return getThridDomain();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GOOD_NO:
        return isSetGoodNo();
      case THRID_DOMAIN:
        return isSetThridDomain();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isGoodExists_args)
        return this.equals((isGoodExists_args)that);
      return false;
    }

    public boolean equals(isGoodExists_args that) {
      if (that == null)
        return false;

      boolean this_present_goodNo = true && this.isSetGoodNo();
      boolean that_present_goodNo = true && that.isSetGoodNo();
      if (this_present_goodNo || that_present_goodNo) {
        if (!(this_present_goodNo && that_present_goodNo))
          return false;
        if (!this.goodNo.equals(that.goodNo))
          return false;
      }

      boolean this_present_thridDomain = true && this.isSetThridDomain();
      boolean that_present_thridDomain = true && that.isSetThridDomain();
      if (this_present_thridDomain || that_present_thridDomain) {
        if (!(this_present_thridDomain && that_present_thridDomain))
          return false;
        if (!this.thridDomain.equals(that.thridDomain))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isGoodExists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGoodNo()).compareTo(other.isSetGoodNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGoodNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodNo, other.goodNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetThridDomain()).compareTo(other.isSetThridDomain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThridDomain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thridDomain, other.thridDomain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isGoodExists_args(");
      boolean first = true;

      sb.append("goodNo:");
      if (this.goodNo == null) {
        sb.append("null");
      } else {
        sb.append(this.goodNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("thridDomain:");
      if (this.thridDomain == null) {
        sb.append("null");
      } else {
        sb.append(this.thridDomain);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isGoodExists_argsStandardSchemeFactory implements SchemeFactory {
      public isGoodExists_argsStandardScheme getScheme() {
        return new isGoodExists_argsStandardScheme();
      }
    }

    private static class isGoodExists_argsStandardScheme extends StandardScheme<isGoodExists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isGoodExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GOOD_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.goodNo = iprot.readString();
                struct.setGoodNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // THRID_DOMAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.thridDomain = iprot.readString();
                struct.setThridDomainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isGoodExists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.goodNo != null) {
          oprot.writeFieldBegin(GOOD_NO_FIELD_DESC);
          oprot.writeString(struct.goodNo);
          oprot.writeFieldEnd();
        }
        if (struct.thridDomain != null) {
          oprot.writeFieldBegin(THRID_DOMAIN_FIELD_DESC);
          oprot.writeString(struct.thridDomain);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isGoodExists_argsTupleSchemeFactory implements SchemeFactory {
      public isGoodExists_argsTupleScheme getScheme() {
        return new isGoodExists_argsTupleScheme();
      }
    }

    private static class isGoodExists_argsTupleScheme extends TupleScheme<isGoodExists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isGoodExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGoodNo()) {
          optionals.set(0);
        }
        if (struct.isSetThridDomain()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGoodNo()) {
          oprot.writeString(struct.goodNo);
        }
        if (struct.isSetThridDomain()) {
          oprot.writeString(struct.thridDomain);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isGoodExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.goodNo = iprot.readString();
          struct.setGoodNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.thridDomain = iprot.readString();
          struct.setThridDomainIsSet(true);
        }
      }
    }

  }

  public static class isGoodExists_result implements org.apache.thrift.TBase<isGoodExists_result, isGoodExists_result._Fields>, java.io.Serializable, Cloneable, Comparable<isGoodExists_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isGoodExists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isGoodExists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isGoodExists_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isGoodExists_result.class, metaDataMap);
    }

    public isGoodExists_result() {
    }

    public isGoodExists_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isGoodExists_result(isGoodExists_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isGoodExists_result deepCopy() {
      return new isGoodExists_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isGoodExists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isGoodExists_result)
        return this.equals((isGoodExists_result)that);
      return false;
    }

    public boolean equals(isGoodExists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isGoodExists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isGoodExists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isGoodExists_resultStandardSchemeFactory implements SchemeFactory {
      public isGoodExists_resultStandardScheme getScheme() {
        return new isGoodExists_resultStandardScheme();
      }
    }

    private static class isGoodExists_resultStandardScheme extends StandardScheme<isGoodExists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isGoodExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isGoodExists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isGoodExists_resultTupleSchemeFactory implements SchemeFactory {
      public isGoodExists_resultTupleScheme getScheme() {
        return new isGoodExists_resultTupleScheme();
      }
    }

    private static class isGoodExists_resultTupleScheme extends TupleScheme<isGoodExists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isGoodExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isGoodExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkThirdId_args implements org.apache.thrift.TBase<checkThirdId_args, checkThirdId_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkThirdId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkThirdId_args");

    private static final org.apache.thrift.protocol.TField THIRD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField THRID_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("thridDomain", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkThirdId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkThirdId_argsTupleSchemeFactory());
    }

    public String thirdId; // required
    public String thridDomain; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      THIRD_ID((short)1, "thirdId"),
      THRID_DOMAIN((short)2, "thridDomain");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // THIRD_ID
            return THIRD_ID;
          case 2: // THRID_DOMAIN
            return THRID_DOMAIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.THIRD_ID, new org.apache.thrift.meta_data.FieldMetaData("thirdId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.THRID_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("thridDomain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkThirdId_args.class, metaDataMap);
    }

    public checkThirdId_args() {
    }

    public checkThirdId_args(
      String thirdId,
      String thridDomain)
    {
      this();
      this.thirdId = thirdId;
      this.thridDomain = thridDomain;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkThirdId_args(checkThirdId_args other) {
      if (other.isSetThirdId()) {
        this.thirdId = other.thirdId;
      }
      if (other.isSetThridDomain()) {
        this.thridDomain = other.thridDomain;
      }
    }

    public checkThirdId_args deepCopy() {
      return new checkThirdId_args(this);
    }

    @Override
    public void clear() {
      this.thirdId = null;
      this.thridDomain = null;
    }

    public String getThirdId() {
      return this.thirdId;
    }

    public checkThirdId_args setThirdId(String thirdId) {
      this.thirdId = thirdId;
      return this;
    }

    public void unsetThirdId() {
      this.thirdId = null;
    }

    /** Returns true if field thirdId is set (has been assigned a value) and false otherwise */
    public boolean isSetThirdId() {
      return this.thirdId != null;
    }

    public void setThirdIdIsSet(boolean value) {
      if (!value) {
        this.thirdId = null;
      }
    }

    public String getThridDomain() {
      return this.thridDomain;
    }

    public checkThirdId_args setThridDomain(String thridDomain) {
      this.thridDomain = thridDomain;
      return this;
    }

    public void unsetThridDomain() {
      this.thridDomain = null;
    }

    /** Returns true if field thridDomain is set (has been assigned a value) and false otherwise */
    public boolean isSetThridDomain() {
      return this.thridDomain != null;
    }

    public void setThridDomainIsSet(boolean value) {
      if (!value) {
        this.thridDomain = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case THIRD_ID:
        if (value == null) {
          unsetThirdId();
        } else {
          setThirdId((String)value);
        }
        break;

      case THRID_DOMAIN:
        if (value == null) {
          unsetThridDomain();
        } else {
          setThridDomain((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case THIRD_ID:
        return getThirdId();

      case THRID_DOMAIN:
        return getThridDomain();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case THIRD_ID:
        return isSetThirdId();
      case THRID_DOMAIN:
        return isSetThridDomain();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkThirdId_args)
        return this.equals((checkThirdId_args)that);
      return false;
    }

    public boolean equals(checkThirdId_args that) {
      if (that == null)
        return false;

      boolean this_present_thirdId = true && this.isSetThirdId();
      boolean that_present_thirdId = true && that.isSetThirdId();
      if (this_present_thirdId || that_present_thirdId) {
        if (!(this_present_thirdId && that_present_thirdId))
          return false;
        if (!this.thirdId.equals(that.thirdId))
          return false;
      }

      boolean this_present_thridDomain = true && this.isSetThridDomain();
      boolean that_present_thridDomain = true && that.isSetThridDomain();
      if (this_present_thridDomain || that_present_thridDomain) {
        if (!(this_present_thridDomain && that_present_thridDomain))
          return false;
        if (!this.thridDomain.equals(that.thridDomain))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkThirdId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetThirdId()).compareTo(other.isSetThirdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThirdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdId, other.thirdId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetThridDomain()).compareTo(other.isSetThridDomain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThridDomain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thridDomain, other.thridDomain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkThirdId_args(");
      boolean first = true;

      sb.append("thirdId:");
      if (this.thirdId == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("thridDomain:");
      if (this.thridDomain == null) {
        sb.append("null");
      } else {
        sb.append(this.thridDomain);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkThirdId_argsStandardSchemeFactory implements SchemeFactory {
      public checkThirdId_argsStandardScheme getScheme() {
        return new checkThirdId_argsStandardScheme();
      }
    }

    private static class checkThirdId_argsStandardScheme extends StandardScheme<checkThirdId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkThirdId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // THIRD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.thirdId = iprot.readString();
                struct.setThirdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // THRID_DOMAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.thridDomain = iprot.readString();
                struct.setThridDomainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkThirdId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.thirdId != null) {
          oprot.writeFieldBegin(THIRD_ID_FIELD_DESC);
          oprot.writeString(struct.thirdId);
          oprot.writeFieldEnd();
        }
        if (struct.thridDomain != null) {
          oprot.writeFieldBegin(THRID_DOMAIN_FIELD_DESC);
          oprot.writeString(struct.thridDomain);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkThirdId_argsTupleSchemeFactory implements SchemeFactory {
      public checkThirdId_argsTupleScheme getScheme() {
        return new checkThirdId_argsTupleScheme();
      }
    }

    private static class checkThirdId_argsTupleScheme extends TupleScheme<checkThirdId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkThirdId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetThirdId()) {
          optionals.set(0);
        }
        if (struct.isSetThridDomain()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetThirdId()) {
          oprot.writeString(struct.thirdId);
        }
        if (struct.isSetThridDomain()) {
          oprot.writeString(struct.thridDomain);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkThirdId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.thirdId = iprot.readString();
          struct.setThirdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.thridDomain = iprot.readString();
          struct.setThridDomainIsSet(true);
        }
      }
    }

  }

  public static class checkThirdId_result implements org.apache.thrift.TBase<checkThirdId_result, checkThirdId_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkThirdId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkThirdId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkThirdId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkThirdId_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkThirdId_result.class, metaDataMap);
    }

    public checkThirdId_result() {
    }

    public checkThirdId_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkThirdId_result(checkThirdId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkThirdId_result deepCopy() {
      return new checkThirdId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkThirdId_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkThirdId_result)
        return this.equals((checkThirdId_result)that);
      return false;
    }

    public boolean equals(checkThirdId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkThirdId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkThirdId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkThirdId_resultStandardSchemeFactory implements SchemeFactory {
      public checkThirdId_resultStandardScheme getScheme() {
        return new checkThirdId_resultStandardScheme();
      }
    }

    private static class checkThirdId_resultStandardScheme extends StandardScheme<checkThirdId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkThirdId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkThirdId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkThirdId_resultTupleSchemeFactory implements SchemeFactory {
      public checkThirdId_resultTupleScheme getScheme() {
        return new checkThirdId_resultTupleScheme();
      }
    }

    private static class checkThirdId_resultTupleScheme extends TupleScheme<checkThirdId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkThirdId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkThirdId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
